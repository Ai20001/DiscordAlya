const { Client, GatewayIntentBits, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, Collection } = require('discord.js');
const { Player } = require('discord-player');
require('dotenv').config();
const fs = require('node:fs');
const path = require('node:path');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMembers
    ]
});

const player = new Player(client);
const playlists = new Map();
const volume = new Map();
const loops = new Map();
const favorites = new Map();

client.commands = new Collection();
client.aliases = new Collection();

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–º–∞–Ω–¥
const commandsPath = path.join(__dirname, 'commands');
const commandFolders = fs.readdirSync(commandsPath);

for (const folder of commandFolders) {
    const folderPath = path.join(commandsPath, folder);
    const commandFiles = fs.readdirSync(folderPath).filter(file => file.endsWith('.js'));
    
    for (const file of commandFiles) {
        const filePath = path.join(folderPath, file);
        const command = require(filePath);
        
        if ('data' in command && 'execute' in command) {
            client.commands.set(command.data.name, command);
            console.log(`[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ${command.data.name}`);
        } else {
            console.log(`[WARNING] –ö–æ–º–∞–Ω–¥–∞ ${filePath} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å–≤–æ–π—Å—Ç–≤ "data" –∏–ª–∏ "execute"`);
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
const eventsPath = path.join(__dirname, 'events');
const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));

for (const file of eventFiles) {
    const filePath = path.join(eventsPath, file);
    const event = require(filePath);
    
    if (event.once) {
        client.once(event.name, (...args) => event.execute(...args, client));
    } else {
        client.on(event.name, (...args) => event.execute(...args, client));
    }
    console.log(`[INFO] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ ${event.name}`);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
async function loadPlaylists() {
    try {
        const data = await fs.promises.readFile('playlists.json', 'utf8');
        const loadedPlaylists = JSON.parse(data);
        Object.entries(loadedPlaylists).forEach(([key, value]) => {
            playlists.set(key, value);
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤:', error);
    }
}

client.once('ready', () => {
    console.log(`–ë–æ—Ç ${client.user.tag} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!`);
});

client.on('messageCreate', async message => {
    if (message.author.bot || !message.content.startsWith('!')) return;

    const args = message.content.slice(1).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    try {
        switch (command) {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            case 'play': await handlePlay(message, args); break;
            case 'stop': await handleStop(message); break;
            case 'skip': await handleSkip(message); break;
            case 'queue': await handleQueue(message); break;
            case 'pause': await handlePause(message); break;
            case 'resume': await handleResume(message); break;
            
            // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é
            case 'volume': await handleVolume(message, args); break;
            case 'volumeup': await adjustVolume(message, 10); break;
            case 'volumedown': await adjustVolume(message, -10); break;
            
            // –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
            case 'playlist': await handlePlaylist(message, args); break;
            case 'save': await savePlaylist(message, args); break;
            case 'load': await loadPlaylist(message, args); break;
            case 'delete': await deletePlaylist(message, args); break;
            case 'playlists': await showPlaylists(message); break;
            
            // –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é
            case 'clear': await clearQueue(message); break;
            case 'shuffle': await shuffleQueue(message); break;
            case 'remove': await removeTrack(message, args); break;
            case 'move': await moveTrack(message, args); break;
            
            // –ö–æ–º–∞–Ω–¥—ã –ø–æ–≤—Ç–æ—Ä–∞
            case 'loop': await toggleLoop(message); break;
            case 'loopqueue': await toggleQueueLoop(message); break;
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            case 'np': await nowPlaying(message); break;
            case 'search': await searchTracks(message, args); break;
            case 'lyrics': await showLyrics(message); break;
            case 'info': await showTrackInfo(message); break;
            
            // –ö–æ–º–∞–Ω–¥—ã –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            case 'favorite': await addFavorite(message); break;
            case 'favorites': await showFavorites(message); break;
            case 'playfav': await playFavorites(message); break;
            
            // –ö–æ–º–∞–Ω–¥—ã —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
            case 'bass': await setBassBoost(message, args); break;
            case 'speed': await setSpeed(message, args); break;
            case 'nightcore': await toggleNightcore(message); break;
            case '8d': await toggle8D(message); break;
            
            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            case 'help': await showHelp(message); break;
            case 'ping': await showPing(message); break;
            case 'stats': await showStats(message); break;
        }
    } catch (error) {
        console.error(error);
        message.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã!');
    }
});

// –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥

async function handleVolume(message, args) {
    const queue = player.getQueue(message.guild.id);
    if (!queue) return message.reply('–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!');

    const vol = parseInt(args[0]);
    if (isNaN(vol) || vol < 0 || vol > 200) {
        return message.reply('–£–∫–∞–∂–∏—Ç–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç 0 –¥–æ 200!');
    }

    queue.setVolume(vol);
    volume.set(message.guild.id, vol);
    message.reply(`üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${vol}%`);
}

async function savePlaylist(message, args) {
    if (!args.length) return message.reply('–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞!');

    const queue = player.getQueue(message.guild.id);
    if (!queue) return message.reply('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞!');

    const name = args.join(' ');
    const tracks = queue.tracks.map(track => ({
        title: track.title,
        url: track.url
    }));

    playlists.set(`${message.guild.id}-${name}`, tracks);
    await savePlaylists();

    message.reply(`‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç "${name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω!`);
}

async function showTrackInfo(message) {
    const queue = player.getQueue(message.guild.id);
    if (!queue || !queue.current) return message.reply('–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!');

    const track = queue.current;
    const embed = new EmbedBuilder()
        .setTitle('üéµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ')
        .setColor('#0099ff')
        .addFields(
            { name: '–ù–∞–∑–≤–∞–Ω–∏–µ', value: track.title },
            { name: '–ê–≤—Ç–æ—Ä', value: track.author },
            { name: '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', value: track.duration },
            { name: '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã', value: track.views?.toString() || '–ù/–î' },
            { name: 'URL', value: track.url }
        )
        .setThumbnail(track.thumbnail);

    message.reply({ embeds: [embed] });
}

async function toggleNightcore(message) {
    const queue = player.getQueue(message.guild.id);
    if (!queue) return message.reply('–°–µ–π—á–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –∏–≥—Ä–∞–µ—Ç!');

    const filter = queue.getFiltersEnabled().includes('nightcore');
    await queue.setFilter('nightcore', !filter);
    message.reply(`üéµ Nightcore —Ä–µ–∂–∏–º ${!filter ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`);
}

async function searchTracks(message, args) {
    if (!args.length) return message.reply('–£–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞!');

    const query = args.join(' ');
    const results = await player.search(query);

    if (!results.tracks.length) {
        return message.reply('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
    }

    const embed = new EmbedBuilder()
        .setTitle('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞')
        .setColor('#0099ff')
        .setDescription(
            results.tracks.slice(0, 10).map((track, i) => 
                `${i + 1}. **${track.title}** - ${track.author}`
            ).join('\n')
        );

    const row = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId('1')
                .setLabel('1')
                .setStyle(ButtonStyle.Primary),
            // –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç—Ä–µ–∫–æ–≤
        );

    message.reply({ embeds: [embed], components: [row] });
}

async function showStats(message) {
    const guilds = client.guilds.cache.size;
    const channels = client.channels.cache.size;
    const users = client.users.cache.size;
    const queues = player.queues.size;

    const embed = new EmbedBuilder()
        .setTitle('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞')
        .setColor('#0099ff')
        .addFields(
            { name: '–°–µ—Ä–≤–µ—Ä–æ–≤', value: guilds.toString() },
            { name: '–ö–∞–Ω–∞–ª–æ–≤', value: channels.toString() },
            { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', value: users.toString() },
            { name: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π', value: queues.toString() },
            { name: '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã', value: formatUptime(client.uptime) }
        );

    message.reply({ embeds: [embed] });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async function savePlaylists() {
    const data = {};
    playlists.forEach((value, key) => {
        data[key] = value;
    });
    await fs.promises.writeFile('playlists.json', JSON.stringify(data, null, 2));
}

function formatUptime(uptime) {
    const days = Math.floor(uptime / 86400000);
    const hours = Math.floor(uptime / 3600000) % 24;
    const minutes = Math.floor(uptime / 60000) % 60;
    return `${days}–¥ ${hours}—á ${minutes}–º`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–ª–µ–µ—Ä–∞
player.on('trackStart', (queue, track) => {
    const embed = new EmbedBuilder()
        .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
        .setDescription(`**${track.title}**\n–î–æ–±–∞–≤–∏–ª: ${track.requestedBy}`)
        .setColor('#00ff00')
        .setThumbnail(track.thumbnail);

    queue.metadata.channel.send({ embeds: [embed] });
});

player.on('error', (queue, error) => {
    console.error(error);
    queue.metadata.channel.send('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏!');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
async function initialize() {
    try {
        console.log('[INFO] –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...');
        await loadPlaylists();
        await client.login(process.env.TOKEN);
        console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞:', error);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('unhandledRejection', error => {
    console.error('[ERROR] –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
initialize(); 